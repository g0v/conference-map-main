// Generated by LiveScript 1.2.0
var $xss, $digit, $trimQuotes, $mapInfo, debug, $Room, fetchEthercalc, $displayRoom, $getHashtag, replace$ = ''.replace;
$xss = function(str){
  return document.createTextNode(str).data;
};
$digit = function(num){
  num = replace$.call(num, /\D/g, '');
  return parseInt(num);
};
$trimQuotes = function(str){
  return str = replace$.call(str, /^"|"$/g, '');
};
$mapInfo = {
  roomArray: []
};
debug = function(){
  return console.log($mapInfo);
};
$Room = (function(){
  $Room.displayName = '$Room';
  var prototype = $Room.prototype, constructor = $Room;
  function $Room(){
    this.id = $xss(
    arguments[0]);
    this.name = $xss(
    $trimQuotes(
    arguments[1]));
    this.topic = $xss(
    $trimQuotes(
    arguments[2]));
    this.content = $xss(
    $trimQuotes(
    arguments[3]));
    this.x = $digit(
    arguments[4]);
    this.y = $digit(
    arguments[5]);
    this.width = $digit(
    arguments[6]);
    this.height = $digit(
    arguments[7]);
    this.zindex = $digit(
    arguments[8]);
  }
  return $Room;
}());
fetchEthercalc = function(doc, cb){
  var oldData, programUrl;
  if ($mapInfo.roomArray) {
    $mapInfo.roomArray = [];
  }
  oldData = document.getElementById('room-data');
  while (oldData.firstChild) {
    oldData.removeChild(oldData.firstChild);
  }
  if (!doc) {
    doc = 'congressoccupied-map';
  }
  programUrl = "https://ethercalc.org/_/" + doc + "/csv";
  return $.ajax({
    url: programUrl,
    type: 'GET',
    error: function(xhr){
      return console.log(xhr);
    },
    success: function(data){
      var csv, currentTable, entries, res$, i$, ref$, len$, line, fields, id;
      csv = data.toString();
      csv = replace$.call(csv, /^\"?#.*\n/gm, '');
      currentTable = void 8;
      res$ = [];
      for (i$ = 0, len$ = (ref$ = csv.split(/\n/)).length; i$ < len$; ++i$) {
        line = ref$[i$];
        if (line) {
          fields = $.csv.toArray(line);
          if (/{T:.*}/.exec(fields[0])) {
            currentTable = fields[0];
            continue;
          }
          if (currentTable === '{T:Room}') {
            id = fields[0];
            if (!id || id === '{id}') {
              continue;
            }
            res$.push($mapInfo.roomArray.push((function(func, args, ctor) {
              ctor.prototype = func.prototype;
              var child = new ctor, result = func.apply(child, args), t;
              return (t = typeof result)  == "object" || t == "function" ? result || child : child;
  })($Room, fields, function(){})));
          }
        }
      }
      entries = res$;
      return cb();
    }
  });
};
$displayRoom = function(){
  var windowWidth, i, i$, ref$, len$, room, nodeId, each_width, each_height, rooms_div_padding, top, left, width, height, zIndex, roomStyle, str, innerNode, node, results$ = [];
  windowWidth = window.innerWidth;
  i = 0;
  for (i$ = 0, len$ = (ref$ = $mapInfo.roomArray).length; i$ < len$; ++i$) {
    room = ref$[i$];
    nodeId = "room_" + (i++);
    if (windowWidth < 760) {
      each_width = each_height = 20;
      rooms_div_padding = 4;
    }
    if (windowWidth < 980) {
      each_width = each_height = 15;
      rooms_div_padding = 4;
    } else {
      each_width = 27;
      each_height = 25;
      rooms_div_padding = 4;
    }
    top = room.y * each_height + "px";
    left = room.x * each_width + "px";
    width = (room.width * each_width - rooms_div_padding * 2) + "px";
    height = (room.height * each_height - rooms_div_padding * 2) + "px";
    zIndex = room.zindex;
    roomStyle = "top: " + top + "; left:" + left + "; z-index:" + zIndex + "; width:" + width + "; height: " + height + "; display:block; position: absolute;";
    str = "<span class='room_name room_tag'>" + room.name + "</span><span><b>" + room.topic + "</b></span><br /><span class='program_desc'>" + room.content + "</span>";
    innerNode = document.createElement('div');
    innerNode.className = 'session clearfix';
    innerNode.style.cssText = roomStyle;
    innerNode.innerHTML = str;
    node = document.createElement('div');
    node.appendChild(innerNode);
    node.id = nodeId;
    node.onclick = fn$;
    results$.push($('#room-data').prepend(node));
  }
  return results$;
  function fn$(){
    $('#popup').html(str);
    $('#popup').bPopup();
    return true;
  }
};
$getHashtag = function(){
  var doc;
  doc = location.hash;
  doc = replace$.call(doc, /^#/, '');
  doc = replace$.call(doc, /\?.*$/, '');
  return doc;
};
$(document).ready(function(){
  setTimeout(function(){
    return window.scrollTo(0, 1);
  }, 100);
  window.onhashchange = function(){
    var doc;
    doc = $getHashtag();
    fetchEthercalc(doc, $displayRoom);
    return true;
  };
  return fetchEthercalc($getHashtag(), $displayRoom);
});